% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ManageFarms.R
\name{ManageFarms}
\alias{ManageFarms}
\title{R6 Class for adding or updating farm information in OFPE database.}
\description{
R6 class that takes a database connection object, path to
the folder with the farm boundaries, and a list with farm information to
upload. Uploads boundaries to the database. Adds a unique ID field for
each farm that is used for internal relationships. If a farm is already
present in the database, it's information will be updated. This
follows the ManageDB interface and includes a setup and execute method that
is called from the ManageDB class.
}
\seealso{
\code{\link{DBCon}} for database connection class,
\code{\link{ManageDB}} for the class that calls this class to manage the database.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{dbCon}}{Database connection object connected to an OFPE formatted
database, see DBCon class.}

\item{\code{farm_info}}{List of farms to update, with each element a list with a
'farm_name' field for the name of the farm, a 'farm_shp_name' field with
the name of the shapefile with the farm boundary, and a field called
'farmer_name' with the name of the farmer who own the farm.}

\item{\code{farm_path}}{File path to the location of farm boundary shapefiles.}

\item{\code{farms}}{List with data prepared for upload to the database. Contains
shapefiles with a column indicating the associated farmer name.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ManageFarms$new()}}
\item \href{#method-setup}{\code{ManageFarms$setup()}}
\item \href{#method-execute}{\code{ManageFarms$execute()}}
\item \href{#method-.setupFarms}{\code{ManageFarms$.setupFarms()}}
\item \href{#method-.uploadFarms}{\code{ManageFarms$.uploadFarms()}}
\item \href{#method-clone}{\code{ManageFarms$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create an ManageFarms object. The database connection and a list with
farm information used to upload farm information to the database with
the appropriate owner information. The farm_path argument indicates the
file path in which to follow for the farm boundary shapefiles that are
to be uploaded to the database. Instantiates the class for running the
setup and execute methods.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ManageFarms$new(dbCon, action_item)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dbCon}}{Database connection object connected to an OFPE formatted
database, see DBCon class.}

\item{\code{action_item}}{List of inputs to the AddFarms method, from the
list passed into the ManageDB class. This includes a list of farm
information and a path to where the farm boundaries are stored.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new initialized 'ManageFarms' object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setup"></a>}}
\if{latex}{\out{\hypertarget{method-setup}{}}}
\subsection{Method \code{setup()}}{
Prepares the farm data prior to uploading to the database. Imports
shapefiles from the farm path and puts them into a list with the
corresponding farmer to be uploaded to the database.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ManageFarms$setup()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{None}}{No arguments needed because they are provided during class
initialization.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Prepared R6 class for uploading farmer information.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-execute"></a>}}
\if{latex}{\out{\hypertarget{method-execute}{}}}
\subsection{Method \code{execute()}}{
Executes the upload of prepared farm information to the database in the
'all_farms' schema and the 'farms' table. If a farm boundary is already
present with the same farm name and farmer that owns it, the entry in the
database is replaced.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ManageFarms$execute()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{None}}{No arguments needed because they are provided during class
initialization.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Farm data uploaded into the 'all_farms.farms' table in the database.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.setupFarms"></a>}}
\if{latex}{\out{\hypertarget{method-.setupFarms}{}}}
\subsection{Method \code{.setupFarms()}}{
Converts a list with information about the farms into a format ready for
uploading to the database. Imports the shapefile using the path name
in the list provided and adds a column for the farmer name. Converts
to EPSG 4326 for storage.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ManageFarms$.setupFarms(farm_info, farm_path = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{farm_info}}{List with information about the farm to upload.}

\item{\code{farm_path}}{Path to the location of farm boundary shapefiles.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ESRI shapefile of farm boundary.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.uploadFarms"></a>}}
\if{latex}{\out{\hypertarget{method-.uploadFarms}{}}}
\subsection{Method \code{.uploadFarms()}}{
Uploads a farm to the database. Takes the farm shapefile and identifies the
coresponding farmeridx, adds it as a column, and then uploads to the
'all_farms.farms' table. Makes sure there is no conflict defined in the
.buildTables method of the BuildDB class. A farmidx is automatically
generated upon upload by PostgreSQL and the area of the farm is calculated
and converted to acres. The dot indicates that this function would be private
if not for documentations sake.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ManageFarms$.uploadFarms(farm, db)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{farm}}{Farm shapefile for upload into 'all_farms.farmers'.}

\item{\code{db}}{Database connection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Farm upload into database.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ManageFarms$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
